pipeline {
  agent any
  environment {
    APP_DIR     = '/home/ubuntu/InventoryAutomation/Inventory'
    REPO_SSH    = 'https://github.com/TayyabaHussain58/InventoryApp.git'
    DEPLOY_USER = 'ubuntu'
    DEPLOY_HOST = 'ec2-51-20-182-249.eu-north-1.compute.amazonaws.com'
    // Add Node.js memory configuration
    NODE_OPTIONS = '--max-old-space-size=4096'
  }
  stages {
    stage('Run Selenium Tests') {
      steps {
        script {
          docker.image('markhobson/maven-chrome').inside("--entrypoint='' -u root") {
            withEnv(["MAVEN_CONFIG=/tmp/.m2"]) {
              dir('InventoryApp') {
                sh 'mvn test'
              }
            }
          }
        }
      }
    }
    stage('Deploy to EC2') {
      steps {
        sshagent(credentials: ['ec2-ssh']) {
          script {
            def appDir = env.APP_DIR
            def repoUrl = env.REPO_SSH
            def deployUser = env.DEPLOY_USER
            def deployHost = env.DEPLOY_HOST
            
            sh """
              ssh -o StrictHostKeyChecking=no ${deployUser}@${deployHost} '
                set -e
                
                echo "=== Starting Deployment Process ==="
                echo "App directory: ${appDir}"
                echo "Repository: ${repoUrl}"
                
                # Set Node.js memory limit
                export NODE_OPTIONS="--max-old-space-size=4096"
                echo "Node.js memory limit set to 4GB"
                
                # Clone or pull app code
                if [ -d "${appDir}/.git" ]; then
                  echo "Repository exists, pulling latest changes..."
                  cd "${appDir}"
                  git pull origin main
                else
                  echo "Cloning repository..."
                  rm -rf "${appDir}"
                  git clone ${repoUrl} "${appDir}"
                fi
                
                cd "${appDir}"
                echo "Current directory: \$(pwd)"
                echo "Repository structure:"
                ls -la
                
                # Find the correct application directory
                APP_SUBDIR=""
                if [ -f "Inventory/package.json" ]; then
                  echo "Found application in Inventory subdirectory"
                  APP_SUBDIR="Inventory"
                elif [ -f "InventoryApp/package.json" ]; then
                  echo "Found application in InventoryApp subdirectory"  
                  APP_SUBDIR="InventoryApp"
                elif [ -f "package.json" ]; then
                  echo "Found application in root directory"
                  APP_SUBDIR="."
                else
                  echo "ERROR: Could not find package.json. Searching..."
                  find . -name "package.json" -type f
                  exit 1
                fi
                
                # Navigate to the application directory
                if [ "\$APP_SUBDIR" != "." ]; then
                  cd "\$APP_SUBDIR"
                fi
                
                echo "Working in directory: \$(pwd)"
                echo "Application files:"
                ls -la
                
                # Verify we have the right structure
                if [ ! -f "package.json" ]; then
                  echo "ERROR: package.json not found in current directory"
                  exit 1
                fi
                
                if [ ! -d "src/server" ]; then
                  echo "ERROR: src/server directory not found"
                  ls -la src/ || echo "src directory does not exist"
                  exit 1
                fi
                
                # Install all dependencies
                echo "=== Installing Dependencies ==="
                npm install
                
                # Deploy Backend
                echo "=== Deploying Backend Server ==="
                
                # Stop existing backend if running
                pm2 delete backend 2>/dev/null || echo "No existing backend process"
                
                # Start backend using the npm script with memory limit
                NODE_OPTIONS="--max-old-space-size=2048" pm2 start npm --name backend -- run server
                
                # Deploy Frontend
                echo "=== Deploying Frontend ==="
                
                # Build the frontend with increased memory
                echo "Building frontend with Vite (4GB memory limit)..."
                NODE_OPTIONS="--max-old-space-size=4096" npm run build
                
                # Stop existing frontend if running
                pm2 delete frontend 2>/dev/null || echo "No existing frontend process"
                
                # Serve the built frontend (check for both dist and build directories)
                if [ -d "dist" ]; then
                  echo "Serving from dist directory"
                  pm2 serve dist 3000 --name frontend --spa
                elif [ -d "build" ]; then
                  echo "Serving from build directory"
                  pm2 serve build 3000 --name frontend --spa
                else
                  echo "No build output found, running in dev mode"
                  NODE_OPTIONS="--max-old-space-size=2048" pm2 start npm --name frontend -- run dev
                fi
                
                # Save PM2 configuration
                pm2 save
                pm2 startup || echo "PM2 startup already configured"
                
                # Show final PM2 status
                echo "=== Deployment Complete ==="
                echo "PM2 Process Status:"
                pm2 list
                
                echo "Backend should be running on port 5000"
                echo "Frontend should be running on port 3000"
                
                # Test if services are responding
                sleep 5
                echo "Testing backend health..."
                curl -f http://localhost:5000 || echo "Backend not responding yet (normal for first start)"
                
                echo "Testing frontend health..."
                curl -f http://localhost:3000 || echo "Frontend not responding yet (normal for first start)"
              '
            """
          }
        }
      }
    }
  }
  post {
    always {
      echo 'Pipeline Execution Finished'
    }
    success {
      echo '✅ Deployment completed successfully!'
      echo 'Your app should be available at:'
      echo '- Frontend: http://ec2-51-20-182-249.eu-north-1.compute.amazonaws.com:3000'
      echo '- Backend API: http://ec2-51-20-182-249.eu-north-1.compute.amazonaws.com:5000'
    }
    failure {
      echo '❌ Deployment failed. Check the logs above for details.'
    }
  }
}
